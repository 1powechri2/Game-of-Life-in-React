{"version":3,"sources":["game_of_life.js","index.js"],"names":["GameOfLife","height","width","this","i","world","Array","j","Math","round","random","emptyWorld","val1","val2","row","col","columnLength","length","rowLength","checkBoundaries","stopI","stopJ","fitness","me","cellVal","status","neighbors","nextGen","neighborsCount","life","checkEvolution","module","exports","gOF","require","firstWorld","Cell","className","style","backgroundColor","props","color","React","Component","World","state","cells","val","value","readWorld","setState","setInterval","evolveGame","flat","map","cell","renderCell","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84ab8c44.chunk.js","sourcesContent":["class GameOfLife {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n\n  world () {\n    var world = [];\n    var i, j;\n    for(i = 0; i < this.height; i++) {\n      world[i] = new Array\n      let j = 0;\n      for(j = 0; j < this.width; j++){\n        world[i][j] = Math.round(Math.random());\n      };\n    };\n    return world;\n  };\n\n  emptyWorld () {\n    var emptyWorld = [];\n    var i, j;\n    for(i = 0; i < this.height; i++) {\n      emptyWorld[i] = new Array\n      for(j = 0; j < this.width; j++){\n        emptyWorld[i][j] = null;\n      };\n    };\n    return emptyWorld;\n  }\n\n  checkBoundaries(val1, val2) {\n    if (val1 == -1) {\n      return val2 -1;\n    }\n    else if (val1 == val2) {\n      return 0;\n    }\n    else {\n      return val1;\n    }\n  }\n\n  cellVal (row, col, world) {\n    var columnLength = world.length;\n    var rowLength = world[0].length;\n    var i = this.checkBoundaries(row, columnLength);\n    var j = this.checkBoundaries(col, rowLength);\n    return world[i][j];\n  }\n\n  neighborsCount (row, col, world) {\n    var i, j;\n    var stopI = row +1;\n    var stopJ = col +1;\n    var fitness = 0;\n    var me = this.cellVal(row,col,world);\n    for (i=row-1; i<=stopI; i++) {\n      for (j=col-1; j<=stopJ; j++) {\n        fitness= fitness + this.cellVal(i, j, world)\n      }\n    }\n    fitness = fitness - me\n    return fitness;\n  }\n\n  checkEvolution (status, neighbors) {\n    if (status == 1 && (neighbors == 2 || neighbors == 3)) {\n      return 'Live';\n    }\n    else if (status == 0 && neighbors == 3) {\n      return 'Live';\n    }\n    else {\n      return 'Dead';\n    }\n  }\n\n  readWorld (world) {\n    var i, j;\n    var nextGen = this.emptyWorld()\n    for (i=0; i<world.length; i++) {\n      for (j=0;j<world[i].length;j++) {\n        var status = this.cellVal(i,j,world)\n        var neighbors = this.neighborsCount(i,j,world)\n        var life = this.checkEvolution(status, neighbors)\n        if (life == 'Live') {\n          nextGen[i][j] = 1\n        }\n        else (\n          nextGen[i][j] = 0\n        )\n      }\n    }\n    return nextGen;\n  }\n}\n\nmodule.exports = GameOfLife;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nconst game = require('./game_of_life');\nconst gOF = new game(100,100);\nconst firstWorld = gOF.world();\nconst glider = [[0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,1,0,0,0],\n                [0,0,0,1,0,1,0,0,0],\n                [0,0,0,0,1,1,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],]\n\nclass Cell extends React.Component {\n  render() {\n    return (\n      <span className='cell' style={{backgroundColor: this.props.color}}>\n        <span className='bullseye'></span>\n      </span>\n    )\n  }\n}\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cells: firstWorld,\n    }\n  }\n\n\n  renderCell(val) {\n    var color = null;\n    if (val == 0) {\n      color = 'black'\n    } else {\n      color = '#EE34D2'\n    }\n    return (\n      <Cell value={val} color={color} />\n    );\n  }\n\n  evolveGame() {\n    var nextGen = gOF.readWorld(this.state.cells);\n    this.setState({cells: nextGen});\n  }\n\n  render() {\n    setInterval(() => {\n      this.evolveGame()\n    } , 500)\n\n    var cells = this.state.cells.flat();\n\n    return(\n      <div className='world'>\n        {cells.map(cell => (\n          this.renderCell(cell)\n        ))}\n      </div>\n    );\n  }\n}\n\nclass GameOfLife extends React.Component {\n  render() {\n    return (\n      <section className=\"game-of-life\">\n        <World />\n      </section>\n    )\n  }\n}\n\nReactDOM.render(\n  <GameOfLife />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}