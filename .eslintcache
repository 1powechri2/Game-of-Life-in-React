[{"/Users/dada/Desktop/EVERYTHING/codeSmells/reactGameOfLife/game-of-life/src/index.js":"1","/Users/dada/Desktop/EVERYTHING/codeSmells/reactGameOfLife/game-of-life/src/game-of-life-code/game_of_life.js":"2"},{"size":1405,"mtime":1610577867752,"results":"3","hashOfConfig":"4"},{"size":2123,"mtime":1610598308152,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"68zg63",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/dada/Desktop/EVERYTHING/codeSmells/reactGameOfLife/game-of-life/src/index.js",["12"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// const game = require('./game-of-life-code/game_of_life');\n\nimport GameOfLife from './game-of-life-code/game_of_life'\nconst gOF = new GameOfLife(100,100);\nconst firstWorld = gOF.world();\n\nclass Cell extends React.Component {\n  render() {\n    return (\n      <span className='cell' style={{backgroundColor: this.props.color}}>\n        <span className='bullseye'></span>\n      </span>\n    )\n  }\n}\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cells: firstWorld,\n    }\n  }\n\n\n  renderCell(val) {\n    var color = null;\n    if (val == 0) {\n      color = 'black'\n    } else {\n      color = '#EE34D2'\n    }\n    return (\n      <Cell value={val} color={color} />\n    );\n  }\n\n  evolveGame() {\n    var nextGen = gOF.readWorld(this.state.cells);\n    this.setState({cells: nextGen});\n  }\n\n  render() {\n    setInterval(() => {\n      this.evolveGame()\n    } , 500)\n\n    var cells = this.state.cells.flat();\n\n    return(\n\n      <div className='world'>\n        {cells.map(cell => (\n          this.renderCell(cell)\n        ))}\n      </div>\n    );\n  }\n}\n\nclass GameLife extends React.Component {\n  render() {\n    return (\n      <section className=\"game-of-life\">\n        <World />\n      </section>\n    )\n  }\n}\n\nReactDOM.render(\n  <GameLife />,\n  document.getElementById('root')\n);\n","/Users/dada/Desktop/EVERYTHING/codeSmells/reactGameOfLife/game-of-life/src/game-of-life-code/game_of_life.js",["13"],"class GameOfLife {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n\n  world () {\n    var world = [];\n    var i, j;\n    for(i = 0; i < this.height; i++) {\n      world[i] = new Array(this.width)\n      for(j = 0; j < this.width; j++){\n        world[i][j] = Math.round(Math.random());\n      };\n    };\n    return world;\n  };\n\n  emptyWorld () {\n    var emptyWorld = [];\n    var i, j;\n    for(i = 0; i < this.height; i++) {\n      emptyWorld[i] = new Array(this.width)\n      for(j = 0; j < this.width; j++){\n        emptyWorld[i][j] = null;\n      };\n    };\n    return emptyWorld;\n  }\n\n  checkBoundaries(val1, val2) {\n    if (val1 === -1) {\n      return val2 -1;\n    }\n    else if (val1 === val2) {\n      return 0;\n    }\n    else {\n      return val1;\n    }\n  }\n\n  cellVal (row, col, world) {\n    var columnLength = world.length;\n    var rowLength = world[0].length;\n    var i = this.checkBoundaries(row, columnLength);\n    var j = this.checkBoundaries(col, rowLength);\n    return world[i][j];\n  }\n\n  neighborsCount (row, col, world) {\n    var i, j;\n    var stopI = row +1;\n    var stopJ = col +1;\n    var fitness = 0;\n    var me = this.cellVal(row,col,world);\n    for (i=row-1; i<=stopI; i++) {\n      for (j=col-1; j<=stopJ; j++) {\n        fitness= fitness + this.cellVal(i, j, world)\n      }\n    }\n    fitness = fitness - me\n    return fitness;\n  }\n\n  checkEvolution (status, neighbors) {\n    if (status === 1 && (neighbors === 2 || neighbors === 3)) {\n      return 'Live';\n    }\n    else if (status === 0 && neighbors === 3) {\n      return 'Live';\n    }\n    else {\n      return 'Dead';\n    }\n  }\n\n  readWorld (world) {\n    var i, j;\n    var nextGen = this.emptyWorld()\n    for (i=0; i<world.length; i++) {\n      for (j=0;j<world[i].length;j++) {\n        var status = this.cellVal(i,j,world)\n        var neighbors = this.neighborsCount(i,j,world)\n        var life = this.checkEvolution(status, neighbors)\n        if (life == 'Live') {\n          nextGen[i][j] = 1\n        }\n        else (\n          nextGen[i][j] = 0\n        )\n      }\n    }\n    return nextGen;\n  }\n}\n\nexport default GameOfLife;\n",{"ruleId":"14","severity":1,"message":"15","line":32,"column":13,"nodeType":"16","messageId":"17","endLine":32,"endColumn":15},{"ruleId":"14","severity":1,"message":"15","line":86,"column":18,"nodeType":"16","messageId":"17","endLine":86,"endColumn":20},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]